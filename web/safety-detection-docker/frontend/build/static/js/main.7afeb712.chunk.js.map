{"version":3,"sources":["assets/logo.png","components/LoggedInHeader.tsx","components/LoggedOutHeader.tsx","components/Header.tsx","assets/footer_logo.png","components/Footer.tsx","components/Layout.tsx","components/Main.tsx","components/Login.tsx","components/Register.tsx","App.tsx","index.tsx"],"names":["LoggedInHeader","_ref","setIsLoggedIn","navigate","useNavigate","_jsxs","className","children","_jsx","onClick","handleLogoClick","src","logo","alt","async","axios","post","error","console","LoggedOutHeader","Header","isLoggedIn","useState","useEffect","response","get","data","is_logged_in","checkLoginStatus","Footer","footerLogo","Layout","style","display","flexDirection","minHeight","flex","padding","Main","csrfToken","setCsrfToken","userInfo","setUserInfo","statuses","setStatuses","postures","setPostures","predictions2","setPredictions2","alertMessage","setAlertMessage","alertColor","setAlertColor","bioData","setBioData","status","setStatus","userResponse","log","fetchUserStatus","fetchUserPosture","updateUserStatus","updateUserPosture","defaults","headers","common","fetchCsrfToken","interval","setInterval","clearInterval","renderStatusChart","bio_data","fetchPredictions2","renderPostureChart","message","currentTime","dayjs","format","concat","name","chartDom","document","getElementById","myChart","echarts","sortedData","sort","a","b","Date","updated_at","getTime","option","title","text","left","textStyle","fontSize","fontWeight","tooltip","trigger","formatter","params","statusText","xAxis","type","map","item","axisTick","alignWithLabel","yAxis","axisLabel","value","series","lineStyle","color","itemStyle","borderWidth","symbolSize","setOption","postureNames","colors","axisPointer","activeSeriesIndex","findIndex","param","time","axisValue","posture","legend","top","itemWidth","itemHeight","grid","right","bottom","containLabel","rotate","max","index","stack","emphasis","focus","barWidth","barGap","window","addEventListener","resize","justifyContent","textAlign","marginTop","_Fragment","age","backgroundColor","border","closeAlert","confirm","alert","id","width","height","Login","setId","password","setPassword","onSubmit","event","preventDefault","location","href","onChange","e","target","Register","formData","setFormData","address","detailed_address","phone_num","guardian_name","guardian_phone_num","errors","setErrors","isIdChecked","setIsIdChecked","handleChange","_objectSpread","isAvailable","Object","keys","key","replace","toUpperCase","length","App","Router","Routes","Route","path","element","ReactDOM","render","React","StrictMode"],"mappings":"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","file":"static/js/main.7afeb712.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.4cc933d0.png\";","import React from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport logo from '../assets/logo.png';\r\nimport '../styles/Header.css'; // Import your CSS file\r\nimport axios from 'axios';\r\n\r\nconst LoggedInHeader = ({ setIsLoggedIn }: { setIsLoggedIn: (isLoggedIn: boolean) => void }) => {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogoClick = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    try {\r\n      await axios.post('/api/logout/', {});\r\n      setIsLoggedIn(false);\r\n      navigate('/login');\r\n    } catch (error) {\r\n      console.error('로그아웃 중 오류 발생:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"logo\" onClick={handleLogoClick}>\r\n        <img src={logo} alt=\"Logo\" />\r\n      </div>\r\n      <nav className=\"nav\">\r\n        <button onClick={handleLogout} className=\"nav-item\">Logout</button>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default LoggedInHeader;","import React from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport logo from '../assets/logo.png';\r\nimport '../styles/Header.css'; // Import your CSS file\r\n\r\nconst LoggedOutHeader = () => {\r\n  const navigate = useNavigate();\r\n\r\n  const handleLogoClick = () => {\r\n    navigate('/');\r\n  };\r\n\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"logo\" onClick={handleLogoClick}>\r\n        <img src={logo} alt=\"Logo\" />\r\n      </div>\r\n      <nav className=\"nav\">\r\n        <button onClick={() => navigate('/login')} className=\"nav-item\">Login</button>\r\n        <button onClick={() => navigate('/register')} className=\"nav-item\">Register</button>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default LoggedOutHeader;","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport LoggedInHeader from './LoggedInHeader';\r\nimport LoggedOutHeader from './LoggedOutHeader';\r\n\r\nconst Header = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // 로그인 상태 확인\r\n    const checkLoginStatus = async () => {\r\n      try {\r\n        const response = await axios.get('/api/check_login/');\r\n        setIsLoggedIn(response.data.is_logged_in);\r\n      } catch (error) {\r\n        console.error('로그인 상태 확인 중 오류 발생:', error);\r\n      }\r\n    };\r\n\r\n    checkLoginStatus();\r\n  }, []);\r\n\r\n  return isLoggedIn ? <LoggedInHeader setIsLoggedIn={setIsLoggedIn} /> : <LoggedOutHeader />;\r\n};\r\n\r\nexport default Header;","export default __webpack_public_path__ + \"static/media/footer_logo.6f08e44e.png\";","import React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport footerLogo from '../assets/footer_logo.png'; // Ensure this path is correct\r\nimport '../styles/Footer.css';\r\n\r\nconst Footer: React.FC = () => {\r\n  const navigate = useNavigate();\r\n\r\n  return (\r\n    <footer className=\"footer\">\r\n      <img \r\n        src={footerLogo} \r\n        alt=\"Footer Logo\" \r\n        className=\"footer-logo\" \r\n        onClick={() => navigate('/')} // Navigate to the main page on click\r\n      />\r\n      <p className=\"footer-text\">℺ All rights reversed.</p> {/* Copyleft Symbol */}\r\n      <p className=\"footer-text\">Contact:  | @gmail.com</p>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport Footer from './Footer';\r\n\r\nconst Layout: React.FC = ({ children }) => {\r\n  return (\r\n    <div style={{ display: 'flex', flexDirection: 'column', minHeight: '100vh' }}>\r\n      <Header />\r\n      <main style={{ flex: '1', padding: '20px' }}>{children}</main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Layout;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport * as echarts from 'echarts';\nimport dayjs from 'dayjs';\n\ninterface TooltipParam {\n  data: number;\n  axisValue: string;\n  seriesName: string;\n}\n\nconst Main = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [csrfToken, setCsrfToken] = useState<string | null>(null);\n  const [userInfo, setUserInfo] = useState<{ name: string; age: number } | null>(null);\n  const [statuses, setStatuses] = useState<{ status: number; updated_at: string }[]>([]);\n  const [postures, setPostures] = useState<{ posture: number; updated_at: string }[]>([]);\n  const [predictions2, setPredictions2] = useState<number[][]>([]);\n  const [alertMessage, setAlertMessage] = useState<string | null>(null);\n  const [alertColor, setAlertColor] = useState<string | null>(null);\n  const [bioData, setBioData] = useState<any[]>([]); // 사용자 생체 데이터를 저장할 상태 추가\n  const [status, setStatus] = useState<number | null>(null); // 상태 값을 저장할 상태 추가\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // 로그인 상태 확인\n    const checkLoginStatus = async () => {\n      try {\n        const response = await axios.get('/api/check_login/');\n        setIsLoggedIn(response.data.is_logged_in);\n        if (response.data.is_logged_in) {\n          const userResponse = await axios.get('/api/user_info/');\n          console.log('User Info:', userResponse.data); // 응답 데이터 출력\n          setUserInfo(userResponse.data);\n          fetchUserStatus();\n          fetchUserPosture();\n          updateUserStatus(); // 로그인 직후 사용자 상태 갱신\n          updateUserPosture(); // 로그인 직후 사용자 자세 갱신\n        }\n      } catch (error) {\n        console.error('로그인 상태 확인 중 오류 발생:', error);\n      }\n    };\n\n    // CSRF 토큰을 가져오는 함수\n    const fetchCsrfToken = async () => {\n      try {\n        const response = await axios.get('/api/csrf_token/');\n        setCsrfToken(response.data.csrfToken);\n        axios.defaults.headers.common['X-CSRFToken'] = response.data.csrfToken; // CSRF 토큰을 기본 헤더에 설정\n      } catch (error) {\n        console.error('CSRF 토큰을 가져오는 중 오류 발생:', error);\n      }\n    };\n\n    checkLoginStatus();\n    fetchCsrfToken();\n\n    // 10분 간격으로 사용자 상태 갱신\n    const interval = setInterval(() => {\n      if (isLoggedIn) {\n        updateUserStatus();\n        updateUserPosture();\n      }\n    }, 10 * 60 * 1000);\n\n    return () => clearInterval(interval);\n  }, [isLoggedIn]);\n\n  const fetchUserStatus = async () => {\n    try {\n      const response = await axios.get('/api/get_status/');\n      setStatuses(response.data.statuses);\n      renderStatusChart(response.data.statuses);\n    } catch (error) {\n      console.error('사용자 상태를 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  const updateUserStatus = async () => {\n    try {\n      const response = await axios.post('/api/update_status/', {});\n      const status = response.data.status;\n      setBioData(response.data.bio_data); // 사용자 생체 데이터를 저장\n      setStatus(status); // 상태 값을 저장\n      fetchUserStatus();\n      if (status === 1 || status === 2) {\n        fetchPredictions2(response.data.bio_data, status); // 생체 데이터와 상태 값을 함께 전송\n      }\n    } catch (error) {\n      console.error('사용자 상태를 갱신하는 중 오류 발생:', error);\n    }\n  };\n\n  const fetchUserPosture = async () => {\n    try {\n      const response = await axios.get('/api/get_posture/');\n      setPostures(response.data.postures);\n      renderPostureChart(response.data.postures);\n    } catch (error) {\n      console.error('사용자 자세를 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  const updateUserPosture = async () => {\n    try {\n      const response = await axios.post('/api/update_posture/', {});\n      fetchUserPosture();\n    } catch (error) {\n      console.error('사용자 자세를 갱신하는 중 오류 발생:', error);\n    }\n  };\n\n  const fetchPredictions2 = async (bioData: any[], status: number) => {\n    try {\n      console.log('생체 데이터:', bioData);\n      const response = await axios.post('/api/predict_model2/', { bio_data: bioData, status: status });\n      setPredictions2(response.data.message);\n      const currentTime = dayjs().format('MM-DD HH:mm:ss');\n      const alertMessage = `${currentTime} 기준, ${userInfo?.name}님은 응급 상태입니다. 응급 단계 조치사항 ${response.data.message}`;\n      console.log('alertMessage : ', alertMessage);\n      setAlertMessage(alertMessage);\n      const color = status === 0 ? 'black' : status === 1 ? 'orange' : 'red';\n      setAlertColor(color);\n    } catch (error) {\n      console.error('모델 2 예측 값을 가져오는 중 오류 발생:', error);\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      await axios.post('/api/logout/', {});\n      setIsLoggedIn(false);\n      navigate('/login');\n    } catch (error) {\n      console.error('로그아웃 중 오류 발생:', error);\n    }\n  };\n\n  const renderStatusChart = (data: { status: number; updated_at: string }[]) => {\n    const chartDom = document.getElementById('main');\n    if (!chartDom) return;\n    const myChart = echarts.init(chartDom);\n    const sortedData = data.sort((a, b) => new Date(a.updated_at).getTime() - new Date(b.updated_at).getTime());\n    const option = {\n      title: {\n        text: 'User Status Over Time',\n        left: 'center',\n        textStyle: {\n          fontSize: 24,         // 제목 글자 크기 증가\n          fontWeight: 'bold'    // 제목 글자 굵기 설정\n        }\n      },\n      tooltip: {\n        trigger: 'axis',\n        formatter: (params: any) => {\n          const statusText = params[0].data[1] === 0 ? 'Normal' : params[0].data[1] === 1 ? 'Caution' : 'Danger';\n          return `${params[0].data[0]}<br/>State: ${statusText}`;\n        }\n      },\n      xAxis: {\n        type: 'category',\n        data: sortedData.map(item => dayjs(item.updated_at).format('MM-DD HH:mm:ss')),\n        axisTick: {\n          alignWithLabel: true  // 눈금을 레이블 중앙에 맞춤\n        }\n      },\n      yAxis: {\n        type: 'category',\n        data: ['Normal', 'Caution', 'Danger'],\n        axisLabel: {\n          formatter: (value: string) => {\n            if (value === 'Normal') return 'Normal';\n            if (value === 'Caution') return 'Caution';\n            if (value === 'Danger') return 'Danger';\n            return value;\n          }\n        },\n        axisTick: {\n          alignWithLabel: true  // 눈금을 레이블 중앙에 맞춤\n        }\n      },\n      series: [\n        {\n          data: sortedData.map(item => [dayjs(item.updated_at).format('MM-DD HH:mm:ss'), item.status]),\n          type: 'line',\n          lineStyle: {\n            color: '#5470C6' // 라인 색깔\n          },\n          itemStyle: {\n            color: (params: any) => {\n              if (params.data[1] === 0) return '#5470C6'; // 점의 색깔을 초록색으로 변경\n              if (params.data[1] === 1) return '#fac858';\n              return '#ee6666';\n            },\n            borderWidth: 2\n          },\n          symbolSize: 6,\n          //symbol: 'circle' // 점의 모양을 원으로 설정\n        }\n      ]\n    };\n    myChart.setOption(option);\n  };\n  \n  const renderPostureChart = (data: { posture: number; updated_at: string }[]) => {\n    const chartDom = document.getElementById('posture');\n    if (!chartDom) return;\n    \n    const myChart = echarts.init(chartDom);\n    const sortedData = data.sort((a, b) => \n      new Date(a.updated_at).getTime() - new Date(b.updated_at).getTime()\n    );\n\n    const postureNames = [\n      'Downstair',\n      'Upstair',\n      'Running',\n      'Sitdown',\n      'StandUp',\n      'Walking',\n      'Fall'\n    ];\n\n    const colors = [\n      '#5470c6',  // Blue for Downstair\n      '#91cc75',  // Green for Upstair\n      '#fac858',  // Yellow for Running\n      '#fc8452',  // Orange for Sitdown\n      '#73c0de',  // Light Blue for StandUp\n      '#3ba272',  // Teal for Walking\n      '#ee6666'   // Red for Fall\n    ];\n\n    const option = {\n      title: {\n        text: 'User Posture History',\n        left: 'center',\n        textStyle: {\n          fontSize: 24,         // 제목 글자 크기 증가\n          fontWeight: 'bold'    // 제목 글자 굵기 설정\n        }\n      },\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'shadow'\n        },\n        formatter: (params: TooltipParam[]) => {\n          const activeSeriesIndex = params.findIndex((param: TooltipParam) => param.data === 1);\n          const time = params[0].axisValue;\n          const posture = postureNames[activeSeriesIndex];\n          return `${time}<br/>Posture: ${posture}`;\n        }\n      },\n      legend: {\n        data: postureNames,\n        top: 40,\n        itemWidth: 27,     // 범례 아이템의 너비\n        itemHeight: 17,    // 범례 아이템의 높이\n        textStyle: {\n          fontSize: 15     // 범례 텍스트 크기\n        },\n      },\n      grid: {\n        left: '8%',\n        right: '10%',\n        bottom: '30%',\n        top: '20%',\n        containLabel: true\n      },\n      xAxis: {\n        type: 'category',\n        data: sortedData.map(item => dayjs(item.updated_at).format('MM-DD HH:mm:ss')),\n        axisLabel: {\n          interval: 0,\n          rotate: 30  // 날짜 레이블이 겹치지 않도록 회전\n        },\n        axisTick: {\n          alignWithLabel: true  // 눈금을 레이블 중앙에 맞춤\n        }\n      },\n      yAxis: {\n        type: 'category',\n        max: 1,\n        data: ['','Posture'],\n        axisLabel: {\n          //align: 'rignt',  // 눈금 텍스트를 중앙에 위치\n          padding: [30, 0, 30,0]  // 텍스트와 눈금 사이의 간격 조정\n        }\n      },\n      series: postureNames.map((name, index) => ({\n        name: name,\n        type: 'bar',\n        stack: 'total',\n        emphasis: {\n          focus: 'series'\n        },\n        barWidth: '100%',  // bar 너비를 100%로 설정\n        //barMaxWidth: 60,  // bar의 최대 너비를 60px로 제한\n        barGap: '0%',     // bar 사이의 간격을 0으로 설정\n        data: sortedData.map(item => item.posture === index ? 1 : 0),\n        itemStyle: {\n          color: colors[index]\n        }\n      }))\n    };\n\n    myChart.setOption(option);\n    // 창 크기가 변경될 때 차트 크기 조정\n    window.addEventListener('resize', () => {\n      myChart.resize();\n    });\n  };\n\n  const handleEmergencyCall = async () => {\n    if (window.confirm('신고하시겠습니까?')) {\n      try {\n        await axios.post('/api/emergency_call/', {});\n        alert('119에 신고되었습니다.');\n      } catch (error) {\n        console.error('신고 중 오류 발생:', error);\n        alert('신고 중 오류가 발생했습니다.');\n      }\n    }\n  };\n\n  const closeAlert = () => {\n    setAlertMessage(null);\n    setAlertColor(null);\n  };\n\n  return (\n    <div>\n      <div style={{ display: 'flex', justifyContent: 'flex-end', padding: '10px' }}>\n        <button onClick={() => status !== null && fetchPredictions2(bioData, status)}>Check Emergency Status</button>\n      </div>\n      <div style={{ textAlign: 'center', marginTop: '20px' }}>\n        {isLoggedIn && userInfo ? (\n          <>\n            <h1>{userInfo.name} ({userInfo.age}Y), currently on the web</h1>\n          </>\n        ) : (\n          <h1>Welcome to the Main Page</h1>\n        )}\n      </div>\n      {alertMessage && (\n        <div className=\"popup-alert\" style={{ backgroundColor: 'white', border: '1px solid black', padding: '10px' }}>\n          \n          <span style={{ color: alertColor || 'black' }}>{alertMessage}</span><br></br>\n          <button onClick={closeAlert}className=\"action-text\">닫기</button>\n          <button onClick={handleEmergencyCall} className=\"action-text\">신고하기</button>\n        </div>\n      )}\n      <div id=\"main\" style={{ width: '100%', height: '400px' }}></div>\n      <div id=\"posture\" style={{ width: '100%', height: '400px', marginTop: '20px' }}></div>\n    </div>\n  );\n};\n\nexport default Main;","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport '../styles/index.css';\n\nconst Login = () => {\n  const [csrfToken, setCsrfToken] = useState<string | null>(null);\n  const [id, setId] = useState('');\n  const [password, setPassword] = useState('');\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchCsrfToken = async () => {\n      try {\n        const response = await axios.get('/api/csrf_token/');\n        setCsrfToken(response.data.csrfToken);\n      } catch (error) {\n        console.error('CSRF 토큰을 가져오는 중 오류 발생:', error);\n      }\n    };\n    fetchCsrfToken();\n  }, []);\n\n  const handleSubmit = async (event: React.FormEvent) => {\n    event.preventDefault();\n    try {\n      const response = await axios.post('/api/login/', {\n        id,\n        password\n      }, {\n        headers: {\n          'X-CSRFToken': csrfToken || ''\n        }\n      });\n      console.log('로그인 성공:', response.data);\n      window.location.href = '/';\n    } catch (error) {\n      console.error('로그인 중 오류 발생:', error);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"register-box\">\n        <h1 className=\"title\">Login</h1>\n        <form onSubmit={handleSubmit}>\n          <div className=\"input-group\">\n            <label className=\"label\">ID:</label>\n            <input \n              type=\"text\" \n              value={id} \n              onChange={(e) => setId(e.target.value)} \n              className=\"input\"\n            />\n          </div>\n          <div className=\"input-group\">\n            <label className=\"label\">Password:</label>\n            <input \n              type=\"password\" \n              value={password} \n              onChange={(e) => setPassword(e.target.value)} \n              className=\"input\"\n            />\n          </div>\n          <button type=\"submit\" className=\"action-text\">Login</button>\n        </form>\n        <button className=\"login-text\" onClick={() => navigate('/register')}>Create Account</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport '../styles/Register.css';\n\nconst Register = () => {\n  const [csrfToken, setCsrfToken] = useState<string | null>(null);\n  const [formData, setFormData] = useState({\n    id: '',\n    password: '',\n    name: '',\n    age: '',\n    address: '',\n    detailed_address: '',\n    phone_num: '',\n    guardian_name: '',\n    guardian_phone_num: '',\n  });\n  const [errors, setErrors] = useState<string[]>([]);\n  const [isIdChecked, setIsIdChecked] = useState(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchCsrfToken = async () => {\n      const response = await axios.get('/api/csrf_token/');\n      setCsrfToken(response.data.csrfToken);\n    };\n    fetchCsrfToken();\n  }, []);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n    if (e.target.name === 'id') {\n      setIsIdChecked(false); // ID가 변경되면 중복 검사 상태를 초기화\n    }\n  };\n\n  const handleIdCheck = async () => {\n    try {\n      const response = await axios.post('/api/check_id/', { id: formData.id }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': csrfToken || ''\n        }\n      });\n      if (response.data.isAvailable) {\n        alert('사용 가능한 ID입니다.');\n        setIsIdChecked(true);\n      } else {\n        alert('이미 사용 중인 ID입니다.');\n        setIsIdChecked(false);\n      }\n    } catch (error) {\n      console.error('ID 중복 검사 중 오류 발생:', error);\n      setIsIdChecked(false);\n    }\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setErrors([]);\n    if (!isIdChecked) {\n      setErrors(['ID 중복 검사를 완료해주세요.']);\n      return;\n    }\n    try {\n      const response = await axios.post('/api/signup/', formData, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': csrfToken || ''\n        }\n      });\n      console.log('회원가입 성공:', response.data);\n      navigate('/login');\n    } catch (error: any) {\n      if (error.response && error.response.data) {\n        setErrors([error.response.data.message]);\n      } else {\n        setErrors(['회원가입 중 오류가 발생했습니다.']);\n      }\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"register-box\">\n        <h1 className=\"title\">Register</h1>\n\n        <form onSubmit={handleSubmit}>\n          <div className=\"input-group\">\n            <label className=\"label\">ID:</label>\n            <div className=\"id-input-group\">\n              <input \n                type=\"text\"\n                name=\"id\"\n                value={formData.id}\n                onChange={handleChange}\n                className=\"input\"\n              />\n              <button type=\"button\" className=\"action-text\" onClick={handleIdCheck}>Check ID</button>\n            </div>\n          </div>\n          {Object.keys(formData).map((key, index) => (\n            index !== 0 && (\n              <div key={key} className=\"input-group\">\n                <label className=\"label\">{key.replace('_', ' ').toUpperCase()}:</label>\n                <input \n                  type={key === 'password' ? 'password' : 'text'}\n                  name={key}\n                  value={formData[key as keyof typeof formData]}\n                  onChange={handleChange}\n                  className=\"input\"\n                />\n              </div>\n            )\n          ))}\n          \n          <button type=\"submit\" className=\"action-text\">Submit</button>\n        </form>\n        {errors.length > 0 && (\n          <div className=\"error-box\">\n            {errors.map((error, index) => (\n              <p key={index}>{error}</p>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Register;","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Layout from './components/Layout';\nimport Main from './components/Main';\nimport Login from './components/Login';\nimport Register from './components/Register';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Layout>\n        <Routes>\n          <Route path=\"/\" element={<Main />} />\n          <Route path=\"/login\" element={<Login />} />\n          <Route path=\"/register\" element={<Register />} />\n        </Routes>\n      </Layout>\n    </Router>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}